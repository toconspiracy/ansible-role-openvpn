---
- name: firewall | iptables | Change facts to use netfilter-persistent on Debian >= 9 or Ubuntu >= 16
  ansible.builtin.set_fact:
    __iptables_save_command: "/usr/sbin/netfilter-persistent save"
    openvpn_iptables_service: netfilter-persistent
  when: >-
    (ansible_distribution == 'Debian' and ansible_distribution_version|int >= 9)
    or
    (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 16)

- name: firewall | iptables | Install iptables-persistent (Debian/Ubuntu)
  ansible.builtin.package:
    name: "{{ iptables_persistent_package_name }}"
    state: present
  register: __iptables_installed
  when: ansible_os_family == "Debian"

- name: firewall | iptables | Install iptables-services (RedHat/CentOS)
  ansible.builtin.package:
    name: "{{ iptables_services_package_name }}"
    state: present
  register: __iptables_installed
  when: ansible_os_family == "RedHat"

- name: firewall | iptables | Allow forwarding from tun devices
  ansible.builtin.iptables:
    chain: FORWARD
    in_interface: tun+
    jump: ACCEPT
    action: insert
    comment: "Allow forwarding from tun devices"
  notify: "Save iptables"

- name: firewall | iptables | Allow incoming SSH connections
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ ansible_port | default(22) }}"
    jump: ACCEPT
    action: insert
    comment: "Allow incoming SSH connection"
  notify: "Save iptables"

- name: firewall | iptables | Allow incoming VPN connections
  ansible.builtin.iptables:
    chain: INPUT
    protocol: "{{ openvpn_proto }}"
    destination_port: "{{ openvpn_port }}"
    jump: ACCEPT
    action: insert
    comment: "Allow incoming VPN connection"
  notify: "Save iptables"

- name: firewall | iptables | Perform NAT readdressing with SNAT
  when: openvpn_masquerade_not_snat is falsy and openvpn_no_nat is falsy
  notify: Save iptables
  block:
    - name: firewall | iptables | Perform IPv4 NAT readdressing with SNAT
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        source: "{{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
        destination: "! {{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
        to_source: "{{ ansible_default_ipv4.address }}"
        jump: SNAT
        action: insert
        comment: "Perform NAT readdressing"
    - name: firewall | iptables | Perform NAT IPv6 readdressing
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        source: "{{ openvpn_server_ipv6_network }}"
        destination: "! {{ openvpn_server_ipv6_network }}"
        to_source: "{{ ansible_default_ipv6.address }}"
        jump: SNAT
        action: insert
        comment: "Perform NAT IPv6 readdressing"
        ip_version: ipv6
      when: openvpn_server_ipv6_network is defined and openvpn_server_ipv6_network

- name: firewall | iptables | Perform NAT readdressing with MASQUERADE
  when: openvpn_masquerade_not_snat is truthy and openvpn_no_nat is falsy
  notify: Save iptables
  block:
    - name: firewall | iptables | Perform NAT readdressing with MASQUERADE
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        source: "{{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
        destination: "! {{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
        jump: MASQUERADE
        action: insert
        comment: "Perform NAT readdressing"
    - name: firewall | iptables | Perform NAT IPv6 readdressing with MASQUERADE
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        source: "{{ openvpn_server_ipv6_network }}"
        destination: "! {{ openvpn_server_ipv6_network }}"
        jump: MASQUERADE
        action: insert
        comment: "Perform NAT IPv6 readdressing"
        ip_version: ipv6
      when: openvpn_server_ipv6_network is defined

- name: firewall | iptables | Save existing iptables rule before start iptables service
  ansible.builtin.shell: "{{ __iptables_save_command }}" # noqa command-instead-of-shell
  when: __iptables_installed.changed is truthy # noqa no-handler
  changed_when: true

- name: firewall | iptables | Enable iptables
  ansible.builtin.service:
    name: "{{ openvpn_iptables_service }}"
    enabled: true
    state: started
